/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LiquidityManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DAI"
      | "NonfungiblePositionManager"
      | "USDC"
      | "collectAllFees"
      | "decreaseLiquidityInHalf"
      | "deposits"
      | "increaseLiquidityCurrentRange"
      | "mintNewPosition"
      | "onERC721Received"
      | "poolFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeesCollected"
      | "LiquidityDecreasedByHalf"
      | "LiquidityIncreased"
      | "PositionMinted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "DAI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "NonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectAllFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityInHalf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityCurrentRange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "poolFee", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DAI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectAllFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityInHalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityCurrentRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolFee", data: BytesLike): Result;
}

export namespace FeesCollectedEvent {
  export type InputTuple = [amount0: BigNumberish, amount1: BigNumberish];
  export type OutputTuple = [amount0: bigint, amount1: bigint];
  export interface OutputObject {
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityDecreasedByHalfEvent {
  export type InputTuple = [amount0: BigNumberish, amount1: BigNumberish];
  export type OutputTuple = [amount0: bigint, amount1: bigint];
  export interface OutputObject {
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityIncreasedEvent {
  export type InputTuple = [
    liquidity: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    liquidity: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    liquidity: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    liquidity: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    liquidity: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    liquidity: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiquidityManager extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidityManager;
  waitForDeployment(): Promise<this>;

  interface: LiquidityManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DAI: TypedContractMethod<[], [string], "view">;

  NonfungiblePositionManager: TypedContractMethod<[], [string], "view">;

  USDC: TypedContractMethod<[], [string], "view">;

  collectAllFees: TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  decreaseLiquidityInHalf: TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  deposits: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, string] & {
        owner: string;
        liquidity: bigint;
        token0: string;
        token1: string;
      }
    ],
    "view"
  >;

  increaseLiquidityCurrentRange: TypedContractMethod<
    [tokenId: BigNumberish, amountAdd0: BigNumberish, amountAdd1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        amount0: bigint;
        amount1: bigint;
      }
    ],
    "nonpayable"
  >;

  mintNewPosition: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        tokenId: bigint;
        liquidity: bigint;
        amount0: bigint;
        amount1: bigint;
      }
    ],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  poolFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DAI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "USDC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectAllFees"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseLiquidityInHalf"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposits"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, string] & {
        owner: string;
        liquidity: bigint;
        token0: string;
        token1: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseLiquidityCurrentRange"
  ): TypedContractMethod<
    [tokenId: BigNumberish, amountAdd0: BigNumberish, amountAdd1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        amount0: bigint;
        amount1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintNewPosition"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        tokenId: bigint;
        liquidity: bigint;
        amount0: bigint;
        amount1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "FeesCollected"
  ): TypedContractEvent<
    FeesCollectedEvent.InputTuple,
    FeesCollectedEvent.OutputTuple,
    FeesCollectedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityDecreasedByHalf"
  ): TypedContractEvent<
    LiquidityDecreasedByHalfEvent.InputTuple,
    LiquidityDecreasedByHalfEvent.OutputTuple,
    LiquidityDecreasedByHalfEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityIncreased"
  ): TypedContractEvent<
    LiquidityIncreasedEvent.InputTuple,
    LiquidityIncreasedEvent.OutputTuple,
    LiquidityIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "PositionMinted"
  ): TypedContractEvent<
    PositionMintedEvent.InputTuple,
    PositionMintedEvent.OutputTuple,
    PositionMintedEvent.OutputObject
  >;

  filters: {
    "FeesCollected(uint256,uint256)": TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;
    FeesCollected: TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;

    "LiquidityDecreasedByHalf(uint256,uint256)": TypedContractEvent<
      LiquidityDecreasedByHalfEvent.InputTuple,
      LiquidityDecreasedByHalfEvent.OutputTuple,
      LiquidityDecreasedByHalfEvent.OutputObject
    >;
    LiquidityDecreasedByHalf: TypedContractEvent<
      LiquidityDecreasedByHalfEvent.InputTuple,
      LiquidityDecreasedByHalfEvent.OutputTuple,
      LiquidityDecreasedByHalfEvent.OutputObject
    >;

    "LiquidityIncreased(uint256,uint256,uint256)": TypedContractEvent<
      LiquidityIncreasedEvent.InputTuple,
      LiquidityIncreasedEvent.OutputTuple,
      LiquidityIncreasedEvent.OutputObject
    >;
    LiquidityIncreased: TypedContractEvent<
      LiquidityIncreasedEvent.InputTuple,
      LiquidityIncreasedEvent.OutputTuple,
      LiquidityIncreasedEvent.OutputObject
    >;

    "PositionMinted(uint256,uint128,uint256,uint256)": TypedContractEvent<
      PositionMintedEvent.InputTuple,
      PositionMintedEvent.OutputTuple,
      PositionMintedEvent.OutputObject
    >;
    PositionMinted: TypedContractEvent<
      PositionMintedEvent.InputTuple,
      PositionMintedEvent.OutputTuple,
      PositionMintedEvent.OutputObject
    >;
  };
}
