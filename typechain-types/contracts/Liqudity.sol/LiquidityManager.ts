/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LiquidityManagerInterface extends utils.Interface {
  functions: {
    "DAI()": FunctionFragment;
    "NonfungiblePositionManager()": FunctionFragment;
    "USDC()": FunctionFragment;
    "collectAllFees(uint256)": FunctionFragment;
    "decreaseLiquidityInHalf(uint256)": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "increaseLiquidityCurrentRange(uint256,uint256,uint256)": FunctionFragment;
    "mintNewPosition(address,address,uint256,uint256,uint24,int24,int24)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "poolFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DAI"
      | "NonfungiblePositionManager"
      | "USDC"
      | "collectAllFees"
      | "decreaseLiquidityInHalf"
      | "deposits"
      | "increaseLiquidityCurrentRange"
      | "mintNewPosition"
      | "onERC721Received"
      | "poolFee"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DAI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "NonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectAllFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityInHalf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityCurrentRange",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "poolFee", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DAI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectAllFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityInHalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityCurrentRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolFee", data: BytesLike): Result;

  events: {
    "FeesCollected(uint256,uint256)": EventFragment;
    "LiquidityDecreasedByHalf(uint256,uint256)": EventFragment;
    "LiquidityIncreased(uint256,uint256,uint256)": EventFragment;
    "PositionMinted(uint256,uint128,uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityDecreasedByHalf"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionMinted"): EventFragment;
}

export interface FeesCollectedEventObject {
  amount0: BigNumber;
  amount1: BigNumber;
}
export type FeesCollectedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeesCollectedEventObject
>;

export type FeesCollectedEventFilter = TypedEventFilter<FeesCollectedEvent>;

export interface LiquidityDecreasedByHalfEventObject {
  amount0: BigNumber;
  amount1: BigNumber;
}
export type LiquidityDecreasedByHalfEvent = TypedEvent<
  [BigNumber, BigNumber],
  LiquidityDecreasedByHalfEventObject
>;

export type LiquidityDecreasedByHalfEventFilter =
  TypedEventFilter<LiquidityDecreasedByHalfEvent>;

export interface LiquidityIncreasedEventObject {
  liquidity: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type LiquidityIncreasedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LiquidityIncreasedEventObject
>;

export type LiquidityIncreasedEventFilter =
  TypedEventFilter<LiquidityIncreasedEvent>;

export interface PositionMintedEventObject {
  tokenId: BigNumber;
  liquidity: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
  owner: string;
  timeStamp: BigNumber;
}
export type PositionMintedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber],
  PositionMintedEventObject
>;

export type PositionMintedEventFilter = TypedEventFilter<PositionMintedEvent>;

export interface LiquidityManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAI(overrides?: CallOverrides): Promise<[string]>;

    NonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseLiquidityInHalf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        owner: string;
        liquidity: BigNumber;
        token0: string;
        token1: string;
      }
    >;

    increaseLiquidityCurrentRange(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintNewPosition(
      _tokenOne: PromiseOrValue<string>,
      _tokenTwo: PromiseOrValue<string>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      _poolFee: PromiseOrValue<BigNumberish>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolFee(overrides?: CallOverrides): Promise<[number]>;
  };

  DAI(overrides?: CallOverrides): Promise<string>;

  NonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  collectAllFees(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseLiquidityInHalf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string] & {
      owner: string;
      liquidity: BigNumber;
      token0: string;
      token1: string;
    }
  >;

  increaseLiquidityCurrentRange(
    tokenId: PromiseOrValue<BigNumberish>,
    amountAdd0: PromiseOrValue<BigNumberish>,
    amountAdd1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintNewPosition(
    _tokenOne: PromiseOrValue<string>,
    _tokenTwo: PromiseOrValue<string>,
    amount0ToMint: PromiseOrValue<BigNumberish>,
    amount1ToMint: PromiseOrValue<BigNumberish>,
    _poolFee: PromiseOrValue<BigNumberish>,
    _tickLower: PromiseOrValue<BigNumberish>,
    _tickUpper: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolFee(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    DAI(overrides?: CallOverrides): Promise<string>;

    NonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    decreaseLiquidityInHalf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        owner: string;
        liquidity: BigNumber;
        token0: string;
        token1: string;
      }
    >;

    increaseLiquidityCurrentRange(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    mintNewPosition(
      _tokenOne: PromiseOrValue<string>,
      _tokenTwo: PromiseOrValue<string>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      _poolFee: PromiseOrValue<BigNumberish>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    poolFee(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "FeesCollected(uint256,uint256)"(
      amount0?: null,
      amount1?: null
    ): FeesCollectedEventFilter;
    FeesCollected(amount0?: null, amount1?: null): FeesCollectedEventFilter;

    "LiquidityDecreasedByHalf(uint256,uint256)"(
      amount0?: null,
      amount1?: null
    ): LiquidityDecreasedByHalfEventFilter;
    LiquidityDecreasedByHalf(
      amount0?: null,
      amount1?: null
    ): LiquidityDecreasedByHalfEventFilter;

    "LiquidityIncreased(uint256,uint256,uint256)"(
      liquidity?: null,
      amount0?: null,
      amount1?: null
    ): LiquidityIncreasedEventFilter;
    LiquidityIncreased(
      liquidity?: null,
      amount0?: null,
      amount1?: null
    ): LiquidityIncreasedEventFilter;

    "PositionMinted(uint256,uint128,uint256,uint256,address,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null,
      amount0?: null,
      amount1?: null,
      owner?: PromiseOrValue<string> | null,
      timeStamp?: PromiseOrValue<BigNumberish> | null
    ): PositionMintedEventFilter;
    PositionMinted(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null,
      amount0?: null,
      amount1?: null,
      owner?: PromiseOrValue<string> | null,
      timeStamp?: PromiseOrValue<BigNumberish> | null
    ): PositionMintedEventFilter;
  };

  estimateGas: {
    DAI(overrides?: CallOverrides): Promise<BigNumber>;

    NonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseLiquidityInHalf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLiquidityCurrentRange(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintNewPosition(
      _tokenOne: PromiseOrValue<string>,
      _tokenTwo: PromiseOrValue<string>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      _poolFee: PromiseOrValue<BigNumberish>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseLiquidityInHalf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLiquidityCurrentRange(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintNewPosition(
      _tokenOne: PromiseOrValue<string>,
      _tokenTwo: PromiseOrValue<string>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      _poolFee: PromiseOrValue<BigNumberish>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
