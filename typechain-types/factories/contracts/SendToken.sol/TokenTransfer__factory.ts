/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenTransfer,
  TokenTransferInterface,
} from "../../../contracts/SendToken.sol/TokenTransfer";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610307806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f5537ede14610030575b600080fd5b6100666004803603606081101561004657600080fd5b506001600160a01b03813581169160208101359091169060400135610068565b005b80836001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156100b657600080fd5b505afa1580156100ca573d6000803e3d6000fd5b505050506040513d60208110156100e057600080fd5b50511015610135576040805162461bcd60e51b815260206004820152601160248201527f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000604482015290519081900360640190fd5b604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152905182916001600160a01b0386169163dd62ed3e91604480820192602092909190829003018186803b15801561019d57600080fd5b505afa1580156101b1573d6000803e3d6000fd5b505050506040513d60208110156101c757600080fd5b505110156102065760405162461bcd60e51b81526004018080602001828103825260288152602001806102aa6028913960400191505060405180910390fd5b604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038481166024830152604482018490529151918516916323b872dd916064808201926020929091908290030181600087803b15801561027857600080fd5b505af115801561028c573d6000803e3d6000fd5b505050506040513d60208110156102a257600080fd5b505050505056fe436f6e7472616374206e6f7420617070726f76656420746f207472616e7366657220746f6b656e73a2646970667358221220bbdc5653a2d59d2578d7c7af73319748c44b72ecc068263f1449179e88c527f664736f6c63430007060033";

type TokenTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenTransfer__factory extends ContractFactory {
  constructor(...args: TokenTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenTransfer> {
    return super.deploy(overrides || {}) as Promise<TokenTransfer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenTransfer {
    return super.attach(address) as TokenTransfer;
  }
  override connect(signer: Signer): TokenTransfer__factory {
    return super.connect(signer) as TokenTransfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenTransferInterface {
    return new utils.Interface(_abi) as TokenTransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenTransfer {
    return new Contract(address, _abi, signerOrProvider) as TokenTransfer;
  }
}
